import numpy as np
from matplotlib import pyplot as plt
from sympy import *
x= Symbol ('x')
y=log(x)
format
x0= 1
dy= diff (y ,x)
d2y = diff (y ,x , 2)
d3y = diff (y ,x , 3)
d4y = diff (y ,x , 4)
y0 = lambdify (x , y)
dyat = lambdify (x , dy)
d2yat = lambdify (x , d2y)
d3yat = lambdify (x , d3y)
d4yat = lambdify (x , d4y)
y=y0(x0)+((x-x0)/1)*dyat(x0)+((x-x0)**2/2)* d2yat(x0)+
((x-x0)**3/6)*d3yat(x0)+((x-x0)**4/24)*d4yat(x0)
print ("Taylor series expansion of log(x) about x=1:", simplify(y))

t1=1.1
y1 = y.subs (x, t1) ;
print('From the obtained Taylor series, log(1.1)~',simplify(float(y1)))

print(‘Verification:’)
print('Actual value of log(1.1) is:', float(log(1.1)))
print('Taylor series:')
simplify((x-1)-(x-1)**2/2+(x-1)**3/3-(x-1)**4/4.0)




import numpy as np
from matplotlib import pyplot as plt
from sympy import*
x= Symbol('x')
y=sin(x)+cos(x)
format
x0= 0
dy= diff(y , x)
d2y = diff(y ,x , 2)
d3y = diff(y ,x , 3)
yat = lambdify(x , y)
dyat = lambdify(x , dy )
d2yat = lambdify(x , d2y )
d3yat = lambdify(x , d3y )
y=yat(x0)+((x-x0))*dyat(x0)+((x-x0)**2/2)* d2yat(x0)+((x-x0)**3/6)*d3yat(x0)
print ("Maclaurins series expansion:", simplify ( y ) )
yat = lambdify(x , y)
print ("Approximated value of sin(10)+cos(10)~%.3f" % yat(10*(pi/180 )))
print("Exact value of sin(10)+cos(10)~%.3f" %(sin(10*(pi/180))+cos(10*(pi/180))))

def f(x):
return np.sin(x)+np.cos(x)
x = np.linspace(-10 , 10 )
plt.plot (x , yat(x) , label ='approximated curve')
plt.plot (x , f(x) , label ='actual curve')
plt.ylim ([-3 , 3])
plt.grid()
plt .legend ()
plt.show()
